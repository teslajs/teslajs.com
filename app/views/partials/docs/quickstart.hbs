<!-- QUICK START -->
<section id="quick-start-section" class="doc-section">

<a class="top-link" href="#home">back to top</a>
<h2 id="quick-start">Quick Start</h2>


<p>Now that you have the command-line tool installed, you can create your first app:</p>

<pre class="code"><code>$ tesla mysite
</code></pre>

<p>This will create a new barebones site with the name "mysite". Next, install dependencies:</p>

<pre class="code"><code>$ cd mysite &amp;&amp; npm install
</code></pre>

<p>Start the server:</p>

<pre class="code"><code>$ gulp
</code></pre>

<p>Once the server has started, simply point your browser to: <a href="http://localhost:3000">http://localhost:3000</a></p>

<p>If you choose not to use Gulp, you can start the server by running <code class="code-inline">node server.js</code>. But using Gulp gives you some extras such as livereload, and watching for changes your files &amp; restarting the server whenever necesary.</p>

</section>

<!-- SETUP -->
<section id="setup-section" class="doc-section">
<a class="top-link" href="#home">back to top</a>
<h2 id="setup-options">Setup Options</h2>


<a class="top-link" href="#home">back to top</a>
<h3 id="basic-settings">Basic Settings</h3>

<p>As you've seen, firing up a basic barebones site is pretty easy, but it's also a bit boring. Tesla is a lot more powerful than that, and it comes with a number of options that lets you create a boilerplate site with much more useful features</p>


<a class="top-link" href="#home">back to top</a>
<h5 id="mvc-scaffolding">MVC Scaffolding</h5>

<p>Tesla includes a generator that will do the dirty work of creting &amp; linking controllers, models &amp; views for you. Let's say you have a databse of users that you want to interact with:</p>

<pre class="code"><code>$ tesla generate user
</code></pre>

<p>This one command will give you basic CRUD functionality via a very simple JSON api. See the <a href="#working-with-data">working with data</a> section for more info on scaffolding as well as working with models, controllers &amp; views.</p>

<a class="top-link" href="#home">back to top</a>
<h5 id="html-templating-engines">HTML templating engines</h5>

<p>By default, Tesla use Jade for HTML templates, but it supports 5 different templating languages: </p>

<p>Options:</p>

<ul>
<li><code class="code-inline">--html ejs</code> <a href="http://embeddedjs.com/">EJS</a> - uses <a href="https://npmjs.org/package/ejs">ejs</a> npm package</li>
<li><code class="code-inline">--html handlebars</code> <a href="http://handlebarsjs.com/">Handlebars</a> - uses <a href="https://npmjs.org/package/hbs">hbs</a> npm package</li>
<li><code class="code-inline">--html hogan</code> <a href="http://twitter.github.io/hogan.js/">Hogan.js</a> - uses <a href="https://npmjs.org/package/hogan-middleware">hogan-middleware</a> npm package</li>
<li><code class="code-inline">--html jade</code> <a href="http://jade-lang.com/">Jade</a> (default) - uses <a href="https://npmjs.org/package/jade">jade</a> npm package</li>
<li><code class="code-inline">--html mustache</code> <a href="http://mustache.github.io/">Mustache</a> - uses <a href="https://npmjs.org/package/mustache-express">mustache-express</a> npm package</li>
</ul>

<p>Example:</p>

<pre class="code"><code>$ tesla myapp --html handlebars
</code></pre>

<a class="top-link" href="#home">back to top</a>
<h5 id="css-pre-processors">CSS pre-processors</h5>

<p>The default setting will just use plain ol' regular CSS. But if you want to use a css preprocessor, you have three options:</p>

<p><strong>Options:</strong></p>

<ul>
<li><code class="code-inline">--css less</code> <a href="http://lesscss.org/">Less</a> - uses <a href="https://npmjs.org/package/less">less</a> npm package</li>
<li><code class="code-inline">--css sass</code> <a href="http://sass-lang.com/">Sass</a> - uses <a href="https://npmjs.org/package/sass">sass</a> npm package</li>
<li><code class="code-inline">--css stylus</code> <a href="http://learnboost.github.io/stylus/">Stylus</a> - uses <a href="https://npmjs.org/package/stylus">stylus</a> npm package</li>
</ul>

<p><strong>Example:</strong></p>

<pre class="code"><code>$ tesla myapp --css stylus
</code></pre>

<a class="top-link" href="#home">back to top</a>
<h5 id="css-helper-libraries">CSS helper libraries</h5>

<p><strong>Options:</strong></p>

<ul>
<li><code class="code-inline">--axis</code> <a href="http://roots.cx/axis/">Axis</a> for Stylus - uses <a href="https://npmjs.org/package/axis">axis</a> npm package</li>
<li><code class="code-inline">--bourbon</code> <a href="http://bourbon.io/">Bourbon</a> for Sass - uses <a href="https://npmjs.org/package/node-bourbon">node-bourbon</a> npm package</li>
<li><code class="code-inline">--nib</code> <a href="http://visionmedia.github.io/nib/">Nib</a> for Stylus - uses <a href="https://npmjs.org/package/nib">nib</a> npm package</li>
</ul>


<h5>NOTE: These helper libraries aren't fully tested yet, so please report any bugs you may find.</h5>

<a class="top-link" href="#home">back to top</a>
<h3 id="front-end-tools">Front-End Tools</h3>

<p>Tesla utilizes Bower to let you quickly add many of your favorite front-end tools such as jQuery, Angular or Bootstrap. If you select any of these options, the package(s) will be added to your bower file, and any javascript or css dependencies will automatically added to the default views.</p>

<a class="top-link" href="#home">back to top</a>
<h5 id="javascript-application-frameworks">JavaScript Application Frameworks</h5>

<p><strong>Options:</strong></p>

<ul>
<li><code class="code-inline">--angular</code> <a href="http://angularjs.org/">AngularJS</a></li>
<li><code class="code-inline">--backbone</code> <a href="http://backbonejs.org/">Backbone.js</a></li>
<li><code class="code-inline">--ember</code> <a href="http://emberjs.com/">Ember.js</a></li>
</ul>

<p><strong>Example:</strong></p>

<pre class="code"><code>$ tesla myapp --backbone
</code></pre>

<a class="top-link" href="#home">back to top</a>
<h5 id="javascript-libraries">JavaScript Libraries</h5>

<p><strong>Options:</strong></p>

<ul>
<li><code class="code-inline">--jquery</code> <a href="http://jquery.org/">jQuery</a></li>
<li><code class="code-inline">--modernizr</code> <a href="http://modernizr.com/">Modernizr</a></li>
<li><code class="code-inline">--zepto</code> <a href="http://zeptojs.com/">Zepto.js</a></li>
</ul>

<p><strong>Example:</strong></p>

<pre class="code"><code>$ tesla myapp --zepto
</code></pre>

<a class="top-link" href="#home">back to top</a>
<h5 id="css-frameworks">CSS Frameworks</h5>

<p><strong>Options:</strong></p>

<ul>
<li><code class="code-inline">--bootstrap</code> <a href="http://getbootstrap.com/">Bootstrap</a></li>
<li><code class="code-inline">--foundation</code> <a href="http://foundation.zurb.com/">Foundation</a></li>
<li><code class="code-inline">--gumby</code> <a href="http://gumbyframework.com/">Gumby</a></li>
<li><code class="code-inline">--skeleton</code> <a href="http://www.getskeleton.com/">Skeleton</a></li>
</ul>

<p><strong>Example:</strong></p>

<pre class="code"><code>$ tesla myapp --gumby
</code></pre>

<a class="top-link" href="#home">back to top</a>
<h3 id="real-world-examples">Real World Examples:</h3>

<p>You can combine any number of the above options to customize your application to your liking:</p>

<p><strong>Example 01: Create an app called foobar that uses EJS, Sass, AngularJS, &amp; jQuery</strong></p>

<pre class="code"><code>$ tesla foobar --html ejs --css sass --angular --jquery
</code></pre>

<p><strong>Example 02: Create an app called coil using Handlebars, Stylus, Axis, Foundation, Ember &amp; jQuery</strong></p>

<pre class="code"><code>$ tesla coil --html handlebars --css stylus --axis --foundation --ember --jquery
</code></pre>

<h4 id="all-tesla-cli-options">All Tesla CLI Options:</h4>

<p>Below is a reference listing all of the available options for the command-line tool:</p>

<pre class="code">Usage: tesla [options]

Options:

// BASIC SETTINGS
-H, --html &lt;engine&gt;  templating engine: (ejs|handlebars|hogan|jade|mustache) (defaults to Jade)
-C, --css &lt;engine&gt;   add stylesheet support (less|sass|stylus) (defaults to vanilla css)
-V, --version        output the version number
-F, --force          force on non-empty directory

// PRE-PROCESSOR LIBRARIES
--axis               add Axis support for Stylus
--bourbon            add Bourbon support for Sass
--nib                add Nib support for Stylus

// FE FRAMEWORKS
--angular            add support for AngularJS
--backbone           add support for BACKBONE.JS
--ember              add support for Ember.js

// JS LIBRARIES
--jquery             add support for jQuery
--modernizr           add support for Modernizr
--zepto              add support for Zepto.js

// CSS FRAMEWORKS
--bootstrap          add support for Bootstrap
--foundation         add support for Foundation
--gumby              add support for Gumby
--skeleton           add support for Skeleton

// OTHER SETTINGS
generate &lt;name&gt;      generate new model + controller with basic CRUD functionality
start                start the web server (still a bit buggy, best just just run "gulp" for now)
</pre>
</section>
